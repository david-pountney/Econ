<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Snap to grid
x=floor(x/32)*32 + 16;
y=floor(y/32)*32 + 16;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  ///Set up pathfinding
selected = false;
drawPath = false;
pathHaulted = false;

path = noone;//path_add();

node = 0;
xx = path_get_point_x(path,node);
yy = path_get_point_y(path,node);

moving = false;

//Path endings
endX = 0;
endY = 0;

xPlusGridSize = x;
xMinusGridSize = x;

yPlusGridSize = y + 32;
yMinusGridSize = y - 32;

mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor(y/32));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if(speed == 0 )drawPath = false;

//if(point_distance(x,y,xx,yy) &lt; 6){
if(path != noone){

    //show_message("Node Amount: " + string(path_get_number(path)));
    //show_message("Node: " + string(node));
    //show_message("XX: " + string(xx));
    //show_message("YY: " + string(yy));
}
//}

if(moving){
    //Completed moving on to a new cell
    if(x &gt;= xPlusGridSize){
        node++;
        
        xMinusGridSize = xPlusGridSize - 32;
        xPlusGridSize = xPlusGridSize + 32;
        //show_message("test: " + string(xx));
        if(path_get_x(path,x) == x){
            //show_message("node: " + string(node));
            //show_message("Node Amount: " + string(path_get_number(path)));
            node = 0;
            xx = path_get_point_x(path,node);
            yy = path_get_point_y(path,node);
            show_message("Finished right movement: " + string(xx));
            //show_message("xx: " + string(xx));
            //show_message("yy: " + string(yy));
            xPlusGridSize = xPlusGridSize - 32;
            moving = false;
            //mp_grid_add_cell(global.pathfindingGrid,floor((x+32)/32),floor(y/32));
            
            exit;
        }
    
        //Right
        xx = path_get_point_x(path,node);
        show_message("xx: " + string(xx));
        show_message("x: " + string(x));
        if(xx &gt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor((x+32)/32),floor(y/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Up
        yy = path_get_point_y(path,node);
        if(yy &lt; y &amp;&amp; yy != 0){
            show_message("y: " + string(y));
            show_message("yy: " + string(yy));
            show_message("node: " + string(node));
            show_message("Node Amount: " + string(path_get_number(path)));
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y-32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Down
        yy = path_get_point_y(path,node);
        if(yy &gt; y){
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y+32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
    }
    if(x &lt;= xMinusGridSize){
        node++;
        show_message("dfdf");
        xPlusGridSize = xPlusGridSize - 32;
        xMinusGridSize = xPlusGridSize - 32;
        
        if(path_get_x(path,x) == x){
            node = 0;
            xx = path_get_point_x(path,node);
            yy = path_get_point_y(path,node);
            //show_message("yy: " + string(yy));
            xMinusGridSize = xMinusGridSize + 32;
            moving = false;
            exit;
        }
        
        //Left
        xx = path_get_point_x(path,node);
        if(xx &lt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor((x-32)/32),floor(y/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Up
        yy = path_get_point_y(path,node);
        if(yy &lt; y &amp;&amp; yy != 0){
            show_message("y: " + string(y));
            show_message("yy: " + string(yy));
            show_message("node: " + string(node));
            show_message("Node Amount: " + string(path_get_number(path)));
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y-32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Down
        yy = path_get_point_y(path,node);
        if(yy &gt; y){
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y+32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
    }
    if(y &lt;= yMinusGridSize){
        node++;
        if(path_get_y(path,y) == y)
            exit;
        yMinusGridSize = yMinusGridSize - 32;
        
        //Left
        xx = path_get_point_x(path,node);
        if(xx &lt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor((x-32)/32),floor(y/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Right
        xx = path_get_point_x(path,node);
        if(xx &gt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor(x+32/32),floor((y)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Up
        yy = path_get_point_y(path,node);
        if(yy &lt; y){
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y-32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
    }
    if(y &gt;= yPlusGridSize){
        node++;
        if(path_get_y(path,y) == y)
            exit;
        yPlusGridSize = yPlusGridSize + 32;
        
        //Left
        xx = path_get_point_x(path,node);
        if(xx &lt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor((x-32)/32),floor(y/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Right
        xx = path_get_point_x(path,node);
        if(xx &gt; x){
            mp_grid_add_cell(global.pathfindingGrid,floor(x+32/32),floor((y)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
        //Down
        yy = path_get_point_y(path,node);
        if(yy &gt; y){
            mp_grid_add_cell(global.pathfindingGrid,floor(x/32),floor((y+32)/32));
            mp_grid_clear_cell(global.pathfindingGrid,floor((x)/32),floor(y/32));
        }
    }
}


/*
if(path != noone){
    if(scr_checkDirection(path) == "right"){
        if(collision_rectangle(x,y - 16,x + 32, y + 16, obj_unit, 0, true) ){
            //path_speed = 0;
            //x = floor(x/32) * 32 + 16;
            //y = floor(y/32) * 32 + 16;
            
            if(!pathHaulted){
                path_end();
                pathHaulted = true;
                x = floor(x/32) * 32 + 16;
                y = floor(y/32) * 32 + 16;
                show_message("stopping movement - right");
            }
        }
        else if(pathHaulted) {
            foundPath = scr_definePath(x,y, endX, endY, path);
            //show_message(string(path_get_kind(path)));
            if(foundPath){
                //x = floor(x/32) * 32 + 16;
                //y = floor(y/32) * 32 + 16;
                drawPath = true;
                //path_set_kind(path,0);
                path_start(path,3,0,1);
                pathHaulted = false;
                show_message("starting movement - right");
            }
        }
    }
    if(scr_checkDirection(path) == "left"){
        if(collision_rectangle(x,y - 16,x - 32, y + 16, obj_unit, 0, true)){
            //path_speed = 0;
            //x = floor(x/32) * 32 + 16;
            //y = floor(y/32) * 32 + 16;
            if(!pathHaulted){
                path_end();
                pathHaulted = true;
                x = floor(x/32) * 32 + 16;
                y = floor(y/32) * 32 + 16;
                show_message("stopping movement - left");
            }
        }
        else if(pathHaulted) {
            foundPath = scr_definePath(x,y, endX, endY, path);
            //show_message(string(path_get_kind(path)));
            if(foundPath){
                //x = floor(x/32) * 32 + 16;
               // y = floor(y/32) * 32 + 16;
                drawPath = true;
                path_start(path,3,0,1);
                pathHaulted = false;
                show_message("starting movement - left");
            }
        }
    }
    if(scr_checkDirection(path) == "up"){
        if(collision_rectangle(x - 16,y - 32,x + 16, y, obj_unit, 0, true)){
            //path_speed = 0;
            //x = floor(x/32) * 32 + 16;
            //y = floor(y/32) * 32 + 16;
            if(!pathHaulted){
                path_end();
                pathHaulted = true;
                x = floor(x/32) * 32 + 16;
                y = floor(y/32) * 32 + 16;
                //show_message("setting pos");
            }
        }
        else if(pathHaulted) {
            foundPath = scr_definePath(x,y, endX, endY, path);
            //show_message(string(path_get_kind(path)));
            if(foundPath){
                //x = floor(x/32) * 32 + 16;
                //y = floor(y/32) * 32 + 16;
                drawPath = true;
                path_start(path,3,0,1);
                pathHaulted = false;
                //show_message("starting movement");
            }
        }
    }
    if(scr_checkDirection(path) == "down"){
        if(collision_rectangle(x - 16,y,x + 16, y + 32, obj_unit, 0, true)){
            //path_speed = 0;
            //x = floor(x/32) * 32 + 16;
            //y = floor(y/32) * 32 + 16;
            if(!pathHaulted){
                path_end();
                pathHaulted = true;
                x = floor(x/32) * 32 + 16;
                y = floor(y/32) * 32 + 16;
                //show_message("setting pos");
            }
        }
        else if(pathHaulted) {
            foundPath = scr_definePath(x,y, endX, endY, path);
            //show_message(string(path_get_kind(path)));
            if(foundPath){
                //pathInterupted = false;
                //x = floor(x/32) * 32 + 16;
                //y = floor(y/32) * 32 + 16;
                drawPath = true;
                path_start(path,3,0,1);
                pathHaulted = false;
                //show_message("starting movement");
            }
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select unit
if(instance_exists(obj_mouse))
    scr_toggleSelect(obj_mouse.px, obj_mouse.py, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw selected

if(selected){
    draw_set_alpha(.25);
    draw_circle_color(x + 16,y + 16,16,c_lime, c_lime, true);
    draw_set_alpha(.1);
    draw_circle_color(x + 16,y + 16,16,c_lime, c_lime, false);
    draw_set_alpha(1);
}

draw_self();

//Debug for drawing path
if(drawPath)    draw_path(path,x,y,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
